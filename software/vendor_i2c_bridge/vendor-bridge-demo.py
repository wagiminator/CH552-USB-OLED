#!/usr/bin/env python3
# ===================================================================================
# Project:   USB Vendor Class to I2C Bridge Demo for CH551, CH552, CH554
# Version:   v1.0
# Year:      2022
# Author:    Stefan Wagner
# Github:    https://github.com/wagiminator
# License:   http://creativecommons.org/licenses/by-sa/3.0/
# ===================================================================================
#
# Description:
# ------------
# This simple demo shows the basic functionality of the USB vendor class to I2C bridge.
# An image is shown on the OLED and then scrolled.
#
# Dependencies:
# -------------
# - pyusb

import sys
import time
import usb.core

# USB device settings
VENDOR_ID   = 0x16C0      # VID (idVendor)
PRODUCT_ID  = 0x05DC      # PID (idProduct)
BULK_EP_OUT = 0x01        # (bEndpointAddress) for bulk writing to device
BULK_EP_IN  = 0x81        # (bEndpointAddress) for bulk reading from device

# USB vendor class control requests (bRequest)
VEN_REQ_BOOTLOADER  = 1   # enter bootloader
VEN_REQ_BUZZER_ON   = 2   # turn on buzzer
VEN_REQ_BUZZER_OFF  = 3   # turn off buzzer
VEN_REQ_I2C_START   = 4   # set start condition on I2C bus
VEN_REQ_I2C_STOP    = 6   # set stop condition on I2C bus

VEN_REQ_WRITE = 0x40      # (bRequestType): vendor host to device
VEN_REQ_READ  = 0xC0      # (bRequestType): vendor device to host

# ===================================================================================
# Main Function
# ===================================================================================

def _main():
    try:
        print('Connecting to device ...')
        oled = Bridge()
    except Exception as ex:
        sys.stderr.write('ERROR: ' + str(ex) + '!\n')
        sys.exit(1)

    try:
        print('Starting the show ...')
        oled.beep()
        oled.senddata(PIC1)
        time.sleep(3)
        oled.beep()
        for i in range(64*4+1):
            oled.scroll(i)
            time.sleep(0.02)
        oled.beep()
    except Exception as ex:
        sys.stderr.write('ERROR: ' + str(ex) + '!\n')
        sys.exit(1)

    print('DONE.')
    sys.exit(0)


# ===================================================================================
# Bridge Class
# ===================================================================================

class Bridge():
    def __init__(self):
        self.dev = usb.core.find(idVendor = VENDOR_ID, idProduct = PRODUCT_ID)
        if self.dev is None:
            raise Exception('Device not found')
        try:
            self.dev.reset()
            self.dev.set_configuration()
        except:
            raise Exception('Could not access USB device')
        self.setup()

    def sendcontrol(self, ctrl):
        self.dev.ctrl_transfer(VEN_REQ_WRITE, ctrl, 0, 0)

    def sendstream(self, stream):
        self.sendcontrol(VEN_REQ_I2C_START)
        self.dev.write(BULK_EP_OUT, stream, 100)
        self.sendcontrol(VEN_REQ_I2C_STOP)

    def senddata(self, data):
        self.sendstream([OLED_ADDR, OLED_DAT_MODE] + data)

    def sendcommand(self, cmd):
        self.sendstream([OLED_ADDR, OLED_CMD_MODE] + cmd)

    def setup(self):
        self.sendcommand(OLED_INIT_CMD)

    def clearscreen(self):
        self.senddata([0] * 1024)

    def scroll(self, scroll):
        self.sendcommand([0xD3, scroll & 63])

    def beep(self):
        self.sendcontrol(VEN_REQ_BUZZER_ON)
        time.sleep(0.2)
        self.sendcontrol(VEN_REQ_BUZZER_OFF)

    def boot(self):
        self.sendcontrol(VEN_REQ_BOOTLOADER)


# ===================================================================================
# OLED Constants
# ===================================================================================

OLED_ADDR     = 0x78    # OLED write address
OLED_CMD_MODE = 0x00    # set command mode
OLED_DAT_MODE = 0x40    # set data mode

# OLED initialisation sequence
OLED_INIT_CMD = [
  0xA8, 0x3F,           # set multiplex ratio  
  0x8D, 0x14,           # set DC-DC enable  
  0x20, 0x00,           # set horizontal memory addressing mode
  0xC8, 0xA1,           # flip screen
  0xDA, 0x12,           # set com pins
  0xAF                  # display on
]

# ===================================================================================
# OLED Picture (Bitmap Converter: http://www.majer.ch/lcd/adf_bitmap.php)
# ===================================================================================

PIC1 = [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xFE, 0xFE,
0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xF0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
0x00, 0x10, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0E, 0x1F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x1F, 0x0E, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xEC,
0xCE, 0xE2, 0xF0, 0x78, 0x38, 0x1C, 0x14, 0x14, 0x1C, 0x18,
0x38, 0x70, 0xE0, 0xE0, 0xC0, 0xC0, 0xE0, 0xE0, 0x60, 0x60,
0xE0, 0xE0, 0xE0, 0xC0, 0x83, 0x87, 0xE6, 0xF0, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8,
0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x3F, 0x0F, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03,
0x07, 0x07, 0x0F, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0,
0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xF8, 0xEB, 0xFA, 0xFF, 0xFF, 0xFF,
0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xF8,
0xF1, 0xFF, 0xFF, 0x71, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xC7, 0xFF, 0xFF, 0xFF, 0x3F, 0xF9, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x3F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC,
0xF0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0,
0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x3F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x07, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0xBE, 0x7F, 0xFF, 0xFF, 0xFF, 0x63, 0x07, 0x0F, 0x0E,
0x04, 0x00, 0x00, 0x08, 0x1E, 0x3F, 0x7F, 0xFC, 0xFC, 0xF8,
0xF8, 0xF0, 0x71, 0x10, 0x0E, 0x00, 0x00, 0x02, 0x07, 0x01,
0x1F, 0x3F, 0xFF, 0xF5, 0xEE, 0xEF, 0xFF, 0xF8, 0x80, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xF8, 0xFE, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x0F, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F,
0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
0xF8, 0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0,
0x80, 0xC0, 0xE0, 0x32, 0x38, 0x38, 0x3E, 0xFF, 0xFF, 0xF3,
0xF8, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x0F, 0x3F, 0x87, 0x9F, 0xC0, 0xFE, 0x3C, 0x38,
0x70, 0x30, 0x64, 0xC0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x00, 0x80, 0x80, 0x80,
0xC0, 0x80, 0x00, 0x00, 0x80, 0xC1, 0xC3, 0x83, 0x01, 0x81,
0xC0, 0x80, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80,
0xC0, 0xC0, 0x80, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x00,
0x80, 0xC0, 0x00, 0x01, 0x81, 0x83, 0x03, 0xC1, 0x80, 0xC0,
0xC0, 0x00, 0x80, 0xC0, 0xC0, 0x80, 0x00, 0x80, 0x80, 0xC0,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x63, 0xF5, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x8F, 0xE7, 0x7F, 0x0F, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0x1F, 0x18, 0x18, 0x0F, 0x07, 0xFF, 0xFF, 0x18, 0x18, 0x1F,
0x0F, 0x07, 0x1F, 0x1A, 0x1A, 0x1B, 0x03, 0x0F, 0x1F, 0x00,
0x00, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0xC9, 0xDB, 0x1A, 0x1E,
0x1E, 0x0C, 0x0F, 0x1F, 0x18, 0x18, 0x1F, 0x07, 0x07, 0x1F,
0x18, 0x18, 0x1F, 0x1F, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x0F,
0x1F, 0x18, 0x18, 0x18, 0x06, 0x0F, 0x1A, 0x1A, 0x1B, 0x0B,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0x40, 0x20, 0x11, 0x13, 0x08, 0x08, 0x08,
0x18, 0x18, 0x18, 0x38, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xE0,
0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE0, 0xE0, 0xF0,
0xF0, 0xF8, 0x78, 0x38, 0x18, 0x18, 0x08, 0x08, 0x08, 0x0F,
0x13, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0x3F, 0x03, 0x03, 0x3F, 0x3E, 0x30,
0x3B, 0x2B, 0x2B, 0x3F, 0x3E, 0x00, 0x3F, 0x03, 0x03, 0x03,
0x3E, 0x3F, 0x23, 0x23, 0x3F, 0x3F, 0x07, 0x3F, 0x38, 0x3E,
0x07, 0x3E, 0x38, 0x1F, 0x03, 0x38, 0x3B, 0x2B, 0x2F, 0x3E,
0x00, 0x3F, 0x3F, 0x03, 0x03, 0x01, 0x3E, 0x3F, 0x2B, 0x2F,
0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0x1F, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,
0x3E, 0x3E, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0x0F,
0x04, 0x00, 0x04, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
0x3E, 0x3E, 0x3E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E,
0x1E, 0x1E, 0x1F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00]


# ===================================================================================

if __name__ == "__main__":
    _main()
